[gd_resource type="VisualShader" load_steps=27 format=3 uid="uid://bmf0xffgc682e"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_unex3"]
source = 5

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_dbeag"]
parameter_name = "albedo_texture"
texture_type = 1
texture_repeat = 1

[sub_resource type="VisualShaderNodeVaryingGetter" id="VisualShaderNodeVaryingGetter_mrkbc"]
varying_name = "mesh_normal"
varying_type = 4

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_lxd4g"]
operator = 8

[sub_resource type="VisualShaderNodeVec3Constant" id="VisualShaderNodeVec3Constant_u741q"]
constant = Vector3(0, 1, 0)

[sub_resource type="VisualShaderNodeVectorFunc" id="VisualShaderNodeVectorFunc_p32kt"]

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_lq6rw"]
operator = 8

[sub_resource type="VisualShaderNodeVectorFunc" id="VisualShaderNodeVectorFunc_fuipy"]

[sub_resource type="VisualShaderNodeVaryingGetter" id="VisualShaderNodeVaryingGetter_p3vie"]
varying_name = "mesh_pos"
varying_type = 4

[sub_resource type="VisualShaderNodeDotProduct" id="VisualShaderNodeDotProduct_a3mdh"]

[sub_resource type="VisualShaderNodeDotProduct" id="VisualShaderNodeDotProduct_og8rf"]

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_vnxsc"]
op_type = 0

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_5fomx"]
default_input_values = [0, Vector2(0, 0), 1, Vector2(0.5, 0.5)]
op_type = 0
operator = 2

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_vc8u2"]
default_input_values = [0, 0.0, 1, -1.0]
operator = 2

[sub_resource type="VisualShaderNodeVec2Parameter" id="VisualShaderNodeVec2Parameter_bx13b"]
parameter_name = "texture_scale"
default_value_enabled = true
default_value = Vector2(1, 1)

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_jwaa6"]
parameter_name = "fade"
qualifier = 2
default_value_enabled = true

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_kbr5y"]
input_name = "fragcoord"

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_7ctl6"]
size = Vector2(1040, 1280)
expression = "// bayer matrix dithering for transparency
vec2 pos = mod(coord, 4.0);
float index = pos.x + pos.y * 4.0;

float bayer_value = 0.0;
// y=0
if (index < 1.0)      { bayer_value =  0.0/16.0; }
else if (index < 2.0) { bayer_value =  8.0/16.0; }
else if (index < 3.0) { bayer_value =  2.0/16.0; }
else if (index < 4.0) { bayer_value = 10.0/16.0; }
// y = 1
else if (index < 5.0) { bayer_value = 12.0/16.0; }
else if (index < 6.0) { bayer_value =  4.0/16.0; }
else if (index < 7.0) { bayer_value = 14.0/16.0; }
else if (index < 8.0) { bayer_value =  6.0/16.0; }
// y = 2
else if (index <  9.0) { bayer_value =  3.0/16.0; }
else if (index < 10.0) { bayer_value = 11.0/16.0; }
else if (index < 11.0) { bayer_value =  1.0/16.0; }
else if (index < 12.0) { bayer_value =  9.0/16.0; }
// y = 3
else if (index < 13.0) { bayer_value = 15.0/15.0; }
else if (index < 14.0) { bayer_value =  7.0/16.0; }
else if (index < 15.0) { bayer_value = 13.0/16.0; }
else                   { bayer_value =  5.0/16.0; }

fade = (1.0 - bayer_value) < fade_threshold;"

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_p20to"]
size = Vector2(1140, 780)
expression = "if (!IN_SHADOW_PASS && fade) {
    discard;
}
out = color;"

[sub_resource type="VisualShaderNodeVaryingSetter" id="VisualShaderNodeVaryingSetter_dgcqm"]
varying_name = "mesh_pos"
varying_type = 4

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_kwxye"]
input_name = "vertex"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_oorxi"]
input_name = "model_matrix"

[sub_resource type="VisualShaderNodeTransformVecMult" id="VisualShaderNodeTransformVecMult_hw56o"]

[sub_resource type="VisualShaderNodeVaryingSetter" id="VisualShaderNodeVaryingSetter_esi0l"]
varying_name = "world_pos"
varying_type = 4

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_415qw"]
input_name = "normal"

[sub_resource type="VisualShaderNodeVaryingSetter" id="VisualShaderNodeVaryingSetter_3ucss"]
varying_name = "mesh_normal"
varying_type = 4

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, depth_test_default, cull_disabled, diffuse_lambert, specular_schlick_ggx;


// Varyings
varying vec3 var_world_pos;
varying vec3 var_mesh_normal;
varying vec3 var_mesh_pos;

instance uniform float fade = 0.0;
uniform vec2 texture_scale = vec2(1.000000, 1.000000);
uniform sampler2D albedo_texture : source_color, repeat_enable;



void vertex() {
// Input:5
	mat4 n_out5p0 = MODEL_MATRIX;


// Input:4
	vec3 n_out4p0 = VERTEX;


// TransformVectorMult:6
	vec3 n_out6p0 = (n_out5p0 * vec4(n_out4p0, 1.0)).xyz;


// VaryingSetter:7
	var_world_pos = n_out6p0;


// Input:8
	vec3 n_out8p0 = NORMAL;


// VaryingSetter:9
	var_mesh_normal = n_out8p0;


// VaryingSetter:10
	var_mesh_pos = n_out4p0;


}

void fragment() {
// FloatParameter:54
	float n_out54p0 = fade;


// Input:55
	vec4 n_out55p0 = FRAGCOORD;


	bool n_out56p0;
// Expression:56
	n_out56p0 = false;
	{
		// bayer matrix dithering for transparency
		vec2 pos = mod(vec2(n_out55p0.xy), 4.0);
		float index = pos.x + pos.y * 4.0;
		
		float bayer_value = 0.0;
		// y=0
		if (index < 1.0)      { bayer_value =  0.0/16.0; }
		else if (index < 2.0) { bayer_value =  8.0/16.0; }
		else if (index < 3.0) { bayer_value =  2.0/16.0; }
		else if (index < 4.0) { bayer_value = 10.0/16.0; }
		// y = 1
		else if (index < 5.0) { bayer_value = 12.0/16.0; }
		else if (index < 6.0) { bayer_value =  4.0/16.0; }
		else if (index < 7.0) { bayer_value = 14.0/16.0; }
		else if (index < 8.0) { bayer_value =  6.0/16.0; }
		// y = 2
		else if (index <  9.0) { bayer_value =  3.0/16.0; }
		else if (index < 10.0) { bayer_value = 11.0/16.0; }
		else if (index < 11.0) { bayer_value =  1.0/16.0; }
		else if (index < 12.0) { bayer_value =  9.0/16.0; }
		// y = 3
		else if (index < 13.0) { bayer_value = 15.0/15.0; }
		else if (index < 14.0) { bayer_value =  7.0/16.0; }
		else if (index < 15.0) { bayer_value = 13.0/16.0; }
		else                   { bayer_value =  5.0/16.0; }
		
		n_out56p0 = (1.0 - bayer_value) < n_out54p0;
	}


// VaryingGetter:33
	vec3 n_out33p0 = var_mesh_pos;


// VaryingGetter:27
	vec3 n_out27p0 = var_mesh_normal;


// Vector3Constant:29
	vec3 n_out29p0 = vec3(0.000000, 1.000000, 0.000000);


// VectorOp:28
	vec3 n_out28p0 = cross(n_out27p0, n_out29p0);


// VectorFunc:30
	vec3 n_out30p0 = normalize(n_out28p0);


// DotProduct:34
	float n_out34p0 = dot(n_out33p0, n_out30p0);


// FloatOp:38
	float n_in38p1 = -1.00000;
	float n_out38p0 = n_out34p0 * n_in38p1;


// VectorOp:31
	vec3 n_out31p0 = cross(n_out27p0, n_out30p0);


// VectorFunc:32
	vec3 n_out32p0 = normalize(n_out31p0);


// DotProduct:35
	float n_out35p0 = dot(n_out33p0, n_out32p0);


// VectorCompose:36
	vec2 n_out36p0 = vec2(n_out38p0, n_out35p0);


// Vector2Parameter:39
	vec2 n_out39p0 = texture_scale;


// VectorOp:37
	vec2 n_out37p0 = n_out36p0 * n_out39p0;


	vec4 n_out21p0;
// Texture2D:21
	n_out21p0 = texture(albedo_texture, n_out37p0);


	vec3 n_out57p0;
// Expression:57
	n_out57p0 = vec3(0.0, 0.0, 0.0);
	{
		if (!IN_SHADOW_PASS && n_out56p0) {
		    discard;
		}
		n_out57p0 = vec3(n_out21p0.xyz);
	}


// Output:0
	ALBEDO = n_out57p0;


}
"
modes/cull = 2
varyings/world_pos = "0,4"
varyings/mesh_normal = "0,4"
varyings/mesh_pos = "0,4"
nodes/vertex/0/position = Vector2(2840, 2420)
nodes/vertex/4/node = SubResource("VisualShaderNodeInput_kwxye")
nodes/vertex/4/position = Vector2(1240, 2400)
nodes/vertex/5/node = SubResource("VisualShaderNodeInput_oorxi")
nodes/vertex/5/position = Vector2(1240, 2740)
nodes/vertex/6/node = SubResource("VisualShaderNodeTransformVecMult_hw56o")
nodes/vertex/6/position = Vector2(1900, 2660)
nodes/vertex/7/node = SubResource("VisualShaderNodeVaryingSetter_esi0l")
nodes/vertex/7/position = Vector2(2340, 2740)
nodes/vertex/8/node = SubResource("VisualShaderNodeInput_415qw")
nodes/vertex/8/position = Vector2(1240, 3080)
nodes/vertex/9/node = SubResource("VisualShaderNodeVaryingSetter_3ucss")
nodes/vertex/9/position = Vector2(2340, 3080)
nodes/vertex/10/node = SubResource("VisualShaderNodeVaryingSetter_dgcqm")
nodes/vertex/10/position = Vector2(2340, 2400)
nodes/vertex/connections = PackedInt32Array(5, 0, 6, 0, 4, 0, 6, 1, 6, 0, 7, 0, 8, 0, 9, 0, 4, 0, 10, 0)
nodes/fragment/0/position = Vector2(5880, -20)
nodes/fragment/21/node = SubResource("VisualShaderNodeTexture_unex3")
nodes/fragment/21/position = Vector2(2800, 480)
nodes/fragment/23/node = SubResource("VisualShaderNodeTexture2DParameter_dbeag")
nodes/fragment/23/position = Vector2(1700, 1520)
nodes/fragment/27/node = SubResource("VisualShaderNodeVaryingGetter_mrkbc")
nodes/fragment/27/position = Vector2(-2100, 1060)
nodes/fragment/28/node = SubResource("VisualShaderNodeVectorOp_lxd4g")
nodes/fragment/28/position = Vector2(-1340, 220)
nodes/fragment/29/node = SubResource("VisualShaderNodeVec3Constant_u741q")
nodes/fragment/29/position = Vector2(-2200, 420)
nodes/fragment/30/node = SubResource("VisualShaderNodeVectorFunc_p32kt")
nodes/fragment/30/position = Vector2(-880, 220)
nodes/fragment/31/node = SubResource("VisualShaderNodeVectorOp_lq6rw")
nodes/fragment/31/position = Vector2(-400, 940)
nodes/fragment/32/node = SubResource("VisualShaderNodeVectorFunc_fuipy")
nodes/fragment/32/position = Vector2(80, 940)
nodes/fragment/33/node = SubResource("VisualShaderNodeVaryingGetter_p3vie")
nodes/fragment/33/position = Vector2(-260, 560)
nodes/fragment/34/node = SubResource("VisualShaderNodeDotProduct_a3mdh")
nodes/fragment/34/position = Vector2(440, 260)
nodes/fragment/35/node = SubResource("VisualShaderNodeDotProduct_og8rf")
nodes/fragment/35/position = Vector2(740, 980)
nodes/fragment/36/node = SubResource("VisualShaderNodeVectorCompose_vnxsc")
nodes/fragment/36/position = Vector2(1540, 520)
nodes/fragment/37/node = SubResource("VisualShaderNodeVectorOp_5fomx")
nodes/fragment/37/position = Vector2(2020, 460)
nodes/fragment/38/node = SubResource("VisualShaderNodeFloatOp_vc8u2")
nodes/fragment/38/position = Vector2(940, 200)
nodes/fragment/39/node = SubResource("VisualShaderNodeVec2Parameter_bx13b")
nodes/fragment/39/position = Vector2(1360, 900)
nodes/fragment/54/node = SubResource("VisualShaderNodeFloatParameter_jwaa6")
nodes/fragment/54/position = Vector2(860, -1060)
nodes/fragment/55/node = SubResource("VisualShaderNodeInput_kbr5y")
nodes/fragment/55/position = Vector2(540, -400)
nodes/fragment/56/node = SubResource("VisualShaderNodeExpression_7ctl6")
nodes/fragment/56/position = Vector2(2100, -1020)
nodes/fragment/56/size = Vector2(1040, 1280)
nodes/fragment/56/input_ports = "0,0,fade_threshold;1,3,coord;"
nodes/fragment/56/output_ports = "0,6,fade;"
nodes/fragment/56/expression = "// bayer matrix dithering for transparency
vec2 pos = mod(coord, 4.0);
float index = pos.x + pos.y * 4.0;

float bayer_value = 0.0;
// y=0
if (index < 1.0)      { bayer_value =  0.0/16.0; }
else if (index < 2.0) { bayer_value =  8.0/16.0; }
else if (index < 3.0) { bayer_value =  2.0/16.0; }
else if (index < 4.0) { bayer_value = 10.0/16.0; }
// y = 1
else if (index < 5.0) { bayer_value = 12.0/16.0; }
else if (index < 6.0) { bayer_value =  4.0/16.0; }
else if (index < 7.0) { bayer_value = 14.0/16.0; }
else if (index < 8.0) { bayer_value =  6.0/16.0; }
// y = 2
else if (index <  9.0) { bayer_value =  3.0/16.0; }
else if (index < 10.0) { bayer_value = 11.0/16.0; }
else if (index < 11.0) { bayer_value =  1.0/16.0; }
else if (index < 12.0) { bayer_value =  9.0/16.0; }
// y = 3
else if (index < 13.0) { bayer_value = 15.0/15.0; }
else if (index < 14.0) { bayer_value =  7.0/16.0; }
else if (index < 15.0) { bayer_value = 13.0/16.0; }
else                   { bayer_value =  5.0/16.0; }

fade = (1.0 - bayer_value) < fade_threshold;"
nodes/fragment/57/node = SubResource("VisualShaderNodeExpression_p20to")
nodes/fragment/57/position = Vector2(4440, -100)
nodes/fragment/57/size = Vector2(1140, 780)
nodes/fragment/57/input_ports = "0,6,fade;1,4,color;"
nodes/fragment/57/output_ports = "0,4,out;"
nodes/fragment/57/expression = "if (!IN_SHADOW_PASS && fade) {
    discard;
}
out = color;"
nodes/fragment/connections = PackedInt32Array(23, 0, 21, 2, 27, 0, 28, 0, 29, 0, 28, 1, 28, 0, 30, 0, 27, 0, 31, 0, 30, 0, 31, 1, 31, 0, 32, 0, 33, 0, 34, 0, 30, 0, 34, 1, 33, 0, 35, 0, 32, 0, 35, 1, 35, 0, 36, 1, 36, 0, 37, 0, 37, 0, 21, 0, 34, 0, 38, 0, 38, 0, 36, 0, 39, 0, 37, 1, 54, 0, 56, 0, 55, 0, 56, 1, 57, 0, 0, 0, 56, 0, 57, 0, 21, 0, 57, 1)
